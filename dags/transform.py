import os
import re
import ast
import pandas as pd
from html import unescape
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def transform_data(execution_date):
    """Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu vi·ªác l√†m t·ª´ file CSV th√¥ th√†nh d·∫°ng chu·∫©n h√≥a."""
    logger.info("B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu cho ng√†y %s", execution_date)

    input_file = f"/opt/airflow/data/vietnamwork/{execution_date}/vietnamworks_jobs.csv"
    output_file = f"/opt/airflow/data/vietnamwork/{execution_date}/vietnamworks_jobs_transformed.csv"

    # 1Ô∏è‚É£ Ki·ªÉm tra file ƒë·∫ßu v√†o
    if not os.path.exists(input_file):
        logger.error("‚ùå File ƒë·∫ßu v√†o %s kh√¥ng t·ªìn t·∫°i.", input_file)
        raise FileNotFoundError(f"Input file {input_file} does not exist")

    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    df = pd.read_csv(input_file, encoding="utf-8-sig")
    logger.info("ƒê√£ ƒë·ªçc %d b·∫£n ghi t·ª´ %s", len(df), input_file)

    # 2Ô∏è‚É£ X·ª≠ l√Ω ng√†y th√°ng
    def normalize_date(date_str):
        """Chu·∫©n h√≥a ƒë·ªãnh d·∫°ng ng√†y th√°ng."""
        if pd.isna(date_str):
            return pd.NaT
        try:
            dt = pd.to_datetime(date_str)
            dt = dt.tz_localize(None)
            return dt
        except Exception as e:
            logger.warning("‚ö† L·ªói khi x·ª≠ l√Ω ng√†y %s: %s", date_str, e)
            return pd.NaT

    for col in ['created_on', 'approved_on', 'expired_on']:
        if col in df.columns:
            df[col] = df[col].apply(normalize_date)

    # 3Ô∏è‚É£ X·ª≠ l√Ω k√Ω t·ª± HTML trong m√¥ t·∫£ c√¥ng vi·ªác
    def clean_html(text):
        """Lo·∫°i b·ªè HTML tags v√† chu·∫©n h√≥a kho·∫£ng tr·∫Øng."""
        if pd.isna(text):
            return text
        text = unescape(str(text))
        text = re.sub(r'<[^>]+>', '', text)
        return ' '.join(text.split())

    for col in ['job_description', 'job_requirement']:
        if col in df.columns:
            df[col] = df[col].apply(clean_html)

    # 4Ô∏è‚É£ Chu·∫©n h√≥a city_name v√† address
    city_mapping = {
        'hanoi': 'Ha Noi',
        'ha noi': 'Ha Noi',
        'ho chi minh': 'Ho Chi Minh',
        'hcm': 'Ho Chi Minh',
        'binh duong': 'Binh Duong',
        'dong nai': 'Dong Nai',
        'other': 'Other'
    }

    def fill_and_normalize(row):
        """Chu·∫©n h√≥a t√™n th√†nh ph·ªë v√† ƒë·ªãa ch·ªâ."""
        city = row.get('city_name')
        addr = row.get('address')

        if pd.isna(city):
            if pd.notna(addr) and addr.lower() in city_mapping:
                city = city_mapping[addr.lower()]
            else:
                city = 'Unknown'
        else:
            city = city_mapping.get(city.lower(), city)

        if pd.isna(addr):
            addr = city

        return pd.Series([city, addr], index=['city_name', 'address'])

    if 'city_name' in df.columns and 'address' in df.columns:
        df[['city_name', 'address']] = df.apply(fill_and_normalize, axis=1)

    # 5Ô∏è‚É£ Chu·∫©n h√≥a ch·ªØ th∆∞·ªùng
    def normalize_case(text):
        """Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh ch·ªØ th∆∞·ªùng v√† chu·∫©n h√≥a kho·∫£ng tr·∫Øng."""
        if pd.isna(text):
            return text
        return ' '.join(str(text).lower().split())

    for col in ['job_title', 'company_name', 'city_name', 'job_description', 'job_requirement', 'address']:
        if col in df.columns:
            df[col] = df[col].apply(normalize_case)

    # 6Ô∏è‚É£ X·ª≠ l√Ω c·ªôt skill_name (list)
    if 'skill_name' in df.columns:
        df['skill_name'] = df['skill_name'].apply(
            lambda x: ast.literal_eval(x) if pd.notna(x) else []
        )

    # 7Ô∏è‚É£ Ghi ra file CSV
    df.to_csv(output_file, index=False, encoding="utf-8-sig")
    logger.info("üéâ Ho√†n t·∫•t transform! ƒê√£ l∆∞u %d b·∫£n ghi v√†o %s", len(df), output_file)
